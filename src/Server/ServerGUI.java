/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import java.awt.EventQueue;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import javax.swing.JTextArea;

/**
 *
 * @author Paolo Delos Reyes, Richard Ingles, and Emir Mendoza
 */
public class ServerGUI extends javax.swing.JFrame implements Runnable{

   // private final String address;
    private final int num;
    private Thread guiThread;
    private List<String> names;
    private List<ClientRunnerino> clients;
        
    public List<ClientRunnerino> getClients(){
    	return clients;
    }
    
    /**
     * Creates new form ServerGUI
     */
    
    public ServerGUI(int portnum) {

        num = portnum;
        
        clients = new ArrayList<ClientRunnerino>();
        names = new ArrayList<String>();
        
        initComponents();
        guiThread = new Thread(this);
        guiThread.start();
        
        globalServer.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        closeServer = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        globalServer = new javax.swing.JTextArea();
        powerOn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setText("REP SERVER");

        closeServer.setText("Power Off");
        closeServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeServerActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        globalServer.setColumns(20);
        globalServer.setRows(5);
        jScrollPane2.setViewportView(globalServer);

        powerOn.setText("Power On");
        powerOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerOnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(powerOn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeServer)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeServer)
                    .addComponent(powerOn))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeServerActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(1);
    }//GEN-LAST:event_closeServerActionPerformed

    private void powerOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerOnActionPerformed
        // TODO add your handling code here:
        globalServer.append("POTATO BANANA \n");
        
    }//GEN-LAST:event_powerOnActionPerformed

    @Override
    public void run(){

    try{
        globalServer.append("REP Messenger is online! \n");
        globalServer.append("Hello\n");
        //create a server socket to read the IP Address(?)
        ServerSocket serversocket =  new ServerSocket(num);
        
        //changeable inside the loop
        boolean isRunning = true;
        
        while(isRunning) {
            Socket socket = serversocket.accept();
            //ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
            
            //PrintWriter output = new PrintWriter(socket.getOutputStream(), true);
        	Scanner serverIn = new Scanner(socket.getInputStream());
        	String username = null;
            while((username = serverIn.nextLine()) == null);
            ClientRunnerino cr = new ClientRunnerino(this, socket,username);
            Thread thread = new Thread(cr);
            thread.start();
            clients.add(cr);
            //JList userOnline
            for(int i = 0 ; i < clients.size() ; i++) {
                //clients.get(i).getWriter().println(clients.size());
                //clients.get(i).getWriter().flush();
                for(int j = 0; j < clients.size(); j++){
                    String user = "~user~";
                    clients.get(i).getWriter().println(user.concat(clients.get(j).getUsername()));
                    clients.get(i).getWriter().flush();
                }
            	
            }
            
	    }
        
        } catch(IOException e){
        	//globalServer.append("ERROR 69: GIRLFRIEND NOT FOUND!");
                e.printStackTrace();
        }
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ServerGUI().setVisible(true);
//            }
//        });
//    }

    public JTextArea getServerText(){
        return globalServer;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeServer;
    public javax.swing.JTextArea globalServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton powerOn;
    // End of variables declaration//GEN-END:variables
}
